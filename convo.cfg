Types:
Players = alice, bob, carol, d
Speaker = alice, bob, carol, noOne
Topic = news, weather, alice, bob, carol
Bool = true, false
Unit = unit
Sentiment = positive, neutral, negative
Properties:
topic :: Unit -> Topic ()
speaking :: Unit -> Speaker ()
related :: Topic -> Topic -> Bool ()
opinion:: Speaker -> Topic -> Sentiment ()
// No longer needed with -s 0
// sharedOpinion :: Speaker -> Topic -> Bool ()

Actions:

formOpinion(person: Speaker, topic: Topic, sentiment(person): Sentiment) {
  opinion(person, topic) = sentiment
}

changeTopic(person: Speaker, newtopic: Topic)
{
  precondition speaking(unit) == person;
  precondition topic(unit) != newtopic;
  precondition B (person): related(topic(unit),newtopic) == true;
  public (Speaker) topic(unit) = newtopic
}

finishSpeaking(person: Speaker) {
  precondition speaking(unit) == person;
  public (Speaker) speaking(unit) = noOne
}

startSpeaking(person: Speaker) {
  precondition speaking(unit) == noOne;
  public (Speaker) speaking(unit) = person
}

shareOpinion(speaker: Speaker, topic: Topic) 
{
  precondition speaking(unit) == speaker;
  precondition topic(unit) == topic;
  precondition 
    Exists s in Sentiment: 
      opinion(speaker, topic) == s;
  tell (Speaker): 
    Which s in Sentiment: 
      opinion(speaker, topic) == s 
//  public (Speaker) sharedOpinion(speaker, topic) = true
}

interrupt(speaker: Speaker) {
  precondition speaking(unit) != speaker;
  precondition speaking(unit) != noOne;
  public (Speaker) speaking(unit) = speaker
}

defer(target: Speaker) {
  public (Speaker) speaking(unit) = target
}

explainRelated(speaker: Speaker, t1: Topic, t2: Topic) {
  precondition B (speaker): related(t1, t2) == true;
  tell (Speaker): related(t1, t2) == true
}

declareRelated(t1(d): Topic, t2(d): Topic) {
  related(t1, t2) = true;
  related(t2, t1) = true
}

// Broken
// declareRelated(t1: Topic, t2: Topic) {
//   related(t1, t2) = true;
//  related(t2, t1) = true
// }

// XXX it - seems like newFeel should be private to person but that
// messes with other agents' possible worlds.
changeOpinion(person: Speaker, topic: Topic, newFeel: Sentiment) {
  precondition opinion(person, topic) != newFeel;
  precondition B (person): 
      Exists influencer in Speaker: opinion(influencer, topic) == newFeel;
  public (person) opinion(person, topic) = newFeel
}

watchNews(person: Speaker) {
  tell (person): Which t in Topic: related(news, t) == true;
  tell (person): Which t in Topic: related(t, news) == true
}

Initial:
topic(unit) = news()
speaking(unit) = noOne()

looks like (alice, bob, carol): Initial

// Execute:
// declareRelated(news, weather)
// watchNews(alice)
// query: B (alice): related(news, weather) == true
// changeTopic(alice, weather)
// print: model
// Done.

Execute:
declareRelated(news,weather)
watchNews(alice)
formOpinion(alice, weather, negative)
formOpinion(alice, news, negative)
formOpinion(carol, weather, positive)
startSpeaking(alice)
shareOpinion(alice, news)
changeTopic(alice, weather)
shareOpinion(alice, weather)
finishSpeaking(alice)
startSpeaking(carol)
query: opinion(carol, weather) == positive
query: B (carol): Exists influencer in Speaker: opinion(influencer, weather) == negative
print: model
changeOpinion(carol, weather, negative)
print: model
Done.

