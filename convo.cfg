// Next step: try writing "listen" actions that cause agents for form
// opinions about one another based on what was just said

Types:
Players = alice, bob, chris
Speaker = alice, bob, chris
Topic = news, weather, food
Bool = true, false
Unit = unit
Sentiment = positive, neutral, negative
Properties:
topic :: Unit -> Topic ()
speaking :: Unit -> Speaker ()
related :: Topic -> Topic -> Bool ()
opinionTopic :: Speaker -> Topic -> Sentiment ()
opinionPerson :: Speaker -> Speaker -> Sentiment ()

Actions:

formTopicOpinion(person: Speaker, topic: Topic, sentiment(person): Sentiment) {
  opinionTopic(person, topic) = sentiment
}

formPersonOpinion(subject: Speaker, object: Speaker, sentiment(subject): Sentiment) {
  opinionPerson(subject, object) = sentiment
}

changeTopic(speaker: Speaker, newtopic: Topic)
{
  precondition related(topic(unit),newtopic) == true;
  precondition speaking(unit) == speaker;
  public (Speaker) topic(unit) = newtopic
}

shareTopicOpinion(speaker: Speaker) 
{
  precondition speaking(unit) == speaker;
  tell (Speaker): Which s in Sentiment: opinionTopic(speaker, topic(unit)) == s 
}

sharePersonOpinion(speaker: Speaker, listener: Speaker) 
{
  precondition speaking(unit) == speaker;
  tell (Speaker): Which s in Sentiment: opinionPerson(speaker, listener) == s 
}

Initial:
topic(unit) = news()
speaking(unit) = alice()
related(news, weather) = true()
related(weather, news) = true()
related(weather, food) = true()
related(food, weather) = true()

looks like (alice, bob, chris): Initial

Execute:
formPersonOpinion(alice, bob, positive)
formPersonOpinion(bob, alice, positive)
goal: B (alice): opinionPerson(bob, alice) == positive
goal: B (alice): B (bob): opinionPerson(alice, bob) == positive
Done.
