Types:
Players = customer, barista
Goods = coffee, tea, euro, sugar, cream
Bool = true, false
Unit = unit
Properties:
wants :: Players -> Goods -> Bool ()
expects :: Players -> Goods -> Bool ()
offered :: Players -> Players -> Goods -> Bool ()
has :: Players -> Goods -> Bool ()


Actions:
formDesire(asker: Players, thing(asker): Goods) {
  wants(asker, thing) = true
}

askFor(asker: Players, askee: Players, thing: Goods) {
  precondition(B (asker): has(askee, thing) == true);
  precondition(wants(asker, thing) == true);
  tell (askee): wants(asker, thing) == true 
}

agreeToTrade(giver: Players, benefactor: Players, good: Goods, currency: Goods) {
  precondition(B (giver): wants(benefactor, good) == true);
  precondition(wants(giver, currency) == true);
  public (Players) expects(benefactor, good) = true;
  public (Players) expects(giver, currency) = true
}

completeTrade(p1: Players, p2: Players, g1: Goods, g2: Goods) {
  precondition(B (p1): expects(p2, g1) == true);
  precondition(B (p2): expects(p1, g2) == true);
  precondition(has(p1, g1) == true);
  precondition(has(p2, g2) == true);
  public(p1,p2) has(p2, g1) = true;
  public(p1,p2) has(p1, g2) = true;
  public(p1,p2) has(p1, g1) = false;
  public(p1,p2) has(p2, g2) = false;
  wants(p1, g2) = false;
  wants(p2, g1) = false;
  expects(p1, g1) = false;
  expects(p2, g1) = false
}

offer(giver: Players, benefactor: Players, good: Goods) {
  precondition(B (giver): has(giver, good) == true);
  public (Players) offered(giver, benefactor, good) = true 
}

acceptOffer(benefactor: Players, giver: Players, good: Goods) {
  precondition(offered(giver, benefactor, good) == true);
  precondition(wants(benefactor, good) == true);
  public (Players) expects(benefactor, good) = true;
  public (Players) offered(giver, benefactor, good) = false
}

declineOffer(benefactor: Players, giver: Players, good: Goods) {
  precondition(offered(giver, benefactor, good) == true);
  public (Players) offered(giver, benefactor, good) = false
}

fulfillOrder(giver: Players, benefactor: Players, good: Goods) {
  precondition B (giver): expects(benefactor, good) == true;
  precondition has(giver, good) == true;
  public (Players) has(giver, good) = false;
  public (Players) has(benefactor, good) = true;
  public (Players) expects(benefactor, good) = false;
  wants(benefactor, good) = false
}



Initial:
has(barista, coffee) = true()
has(barista, tea) = true()
has(customer, euro) = true()
has(barista, cream) = true()
has(barista, sugar) = true()
wants(barista, euro) = true()

looks like (customer, barista):
  Initial

Execute:
print: model
formDesire(customer, coffee)
formDesire(customer, cream)
askFor(customer, barista, coffee)
agreeToTrade(barista, customer, coffee, euro)
offer(barista, customer, sugar)
offer(barista, customer, cream)
goal: offered(barista, customer, sugar) == false
goal: offered(barista, customer, cream) == false
goal: has(customer, coffee) == true
goal: has(customer, cream) == true
print: model
Done.


