Types:
Players = Moriarty, Sherlock
Suspects = Moriarty, Watson
Detectives = Sherlock
Victims = Victim
Guns = pistol
Locations = Manor, Shed
Properties:
murderer :: Players -> Suspects ()
owner :: Locations -> Suspects ()
gunowner :: Guns -> Suspects ()
at :: Guns -> Locations ()
Actions:
take(m(m): Suspects, g: Guns)
    gunowner(g) = m
kill(m(m): Suspects, v: Victims, g: Guns)
{
    precondition gunowner(g) == m;
    murderer(v) = m
}
put(s(s): Suspects, g: Guns, l: Locations)
    at(g) = l
find(d: Detectives, g: Guns, l: Locations)
{
    precondition at(g) == l;
    suspect (d): Forall v in Victims: gunowner(g) == owner(l)
}
Initial:
//setting up the initial state
owner(Manor) = Moriarty()
owner(Shed) = Watson()
looks like (Moriarty,Sherlock,Watson,Victim): Initial


Execute:
print: model
// first execute an action manually
take(Moriarty,pistol)

print: model
// then have the system find an action sequence to satisfy a goal
query:  B (Moriarty): B (Sherlock): murderer(Victim) == Watson
goal: B (Moriarty): B (Sherlock): murderer(Victim) == Watson
query: B (Moriarty): B (Sherlock): murderer(Victim) == Watson
print: model
// show that Sherlock doesn't actually believe that Watson is the murderer
query: B (Sherlock): murderer(Victim) == Watson
Done.